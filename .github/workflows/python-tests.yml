name: Python Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg unzip
        
        # Install Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

        # Pin ChromeDriver to a stable version
        CHROMEDRIVER_VERSION=124.0.6367.91
        echo "âœ… Using pinned ChromeDriver version: $CHROMEDRIVER_VERSION"

        wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        sudo unzip -o /tmp/chromedriver.zip -d /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xvfb
        pip install -r requirements.txt

    - name: Create necessary directories
      run: |
        mkdir -p results
        mkdir -p visuals

    - name: Run tests with pytest
      env:
        DISPLAY: :99
      run: |
        # Run tests with coverage
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
      
    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage HTML report as artifact
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: htmlcov/

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts-python-${{ matrix.python-version }}
        path: |
          results/
          visuals/
          library.db

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
    
    - name: Run Black (code formatter check)
      run: black --check --diff src/ tests/
      continue-on-error: true
    
    - name: Run isort (import sorting check)
      run: isort --check-only --diff src/ tests/
      continue-on-error: true
    
    - name: Run Flake8 (linting)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
      continue-on-error: true
    
    - name: Run MyPy (type checking)
      run: mypy src/ --ignore-missing-imports
      continue-on-error: true